import 'package:f5xc_tool/middleware/config.dart';
import 'package:f5xc_tool/middleware/request_helper.dart';
import 'package:f5xc_tool/middleware/sql_query_helper.dart';
import 'package:f5xc_tool/model/revision_model.dart';
import 'package:f5xc_tool/model/version_model.dart';
import 'package:f5xc_tool/screen/dashboard/load_balancer/revision_dialog.dart';
import 'package:flutter/material.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

class MyList extends StatefulWidget {
  const MyList({super.key, required this.modelList, required this.policyType});

  final PolicyType policyType;
  final ListVersionModel modelList;

  @override
  State<MyList> createState() => _MyListState();
}

class _MyListState extends State<MyList> {
  late FlutterSecureStorage storage;
  late String auth = '';

  @override
  Widget build(BuildContext context) {
    // getData();
    if (widget.modelList.responseCode > 200) {
      return Text('Error ${widget.modelList.responseCode}');
    } else if (widget.modelList.versionData == null) {
      return Text('Version Data is empty');
    } else {
      List<VersionModel> model =
          widget.modelList.versionData ?? [VersionModel()];
      return ListView.builder(
          itemCount: widget.modelList.versionData!.length,
          shrinkWrap: true,
          itemBuilder: (context, index) {
            return ExpansionTile(
                title: ListTile(
                  style: ListTileStyle.drawer,
                  leading: IconButton.filledTonal(
                      tooltip:
                          model[index].environment?.toUpperCase() ?? "Staging",
                      onPressed: null,
                      icon: model[index].environment == "staging"
                          ? Icon(Icons.shield_outlined)
                          : Icon(Icons.shield_rounded)),
                  title: Text('${model[index].appName}'),
                  subtitle:
                      Text('Version ${model[index].currentVersion} is active.'),
                ),
                children: [
                  FutureBuilder(
                      future: _buildChildren(model[index]),
                      builder: (context, snapshot) {
                        switch (snapshot.connectionState) {
                          case ConnectionState.done:
                            ListRevisionModel data = snapshot.data ??
                                ListRevisionModel(responseCode: 400);
                            return _buildRevisionList(data, model[index]);

                          default:
                            return Container();
                        }
                      })
                ]);
          });
    }
  }

  Widget _buildRevisionList(ListRevisionModel data, VersionModel model) {
    List<RevisionModel> modelList = data.listRevisionModel ?? [];
    return ListView.builder(
        itemCount: modelList.length,
        shrinkWrap: true,
        itemBuilder: (context, index) {
          if (data.responseCode > 200) {
            return ListTile(
              title: Text('Error was found in building list.'),
            );
          }
          bool active = modelList[index].version == model.currentVersion;
          return ExpansionTile(
            childrenPadding: EdgeInsets.only(left: 24),
            leading: active
                ? IconButton.filledTonal(
                    onPressed: null,
                    icon: Icon(Icons.policy_rounded),
                    tooltip: 'Current Active Policy',
                  )
                : IconButton.filledTonal(
                    tooltip: 'Inactive Policy',
                    onPressed: null,
                    icon: Icon(Icons.policy_outlined)),
            title: Text('Version ${modelList[index].version}'),
            subtitle: Text(
                'Date modified: ${RequestHelper().dateTimeFromEpoch((modelList[index].timestamp!), 'Asia/Singapore')} GMT +8'),
            children: [
              ListTile(
                subtitle: Text(modelList[index].generatedBy!.toUpperCase()),
                title: Text('Generated by'),
              ),
              ListTile(
                title: Text('Load Balancer Configuration'),
                trailing: Icon(Icons.navigate_next),
                onTap: () {
                  showDialog(
                      context: context,
                      builder: (context) {
                        return AlertDialog.adaptive(
                          title: Text('Load Balancer Configuration'),
                          content: RevisionDialog(
                              jsonData: modelList[index].lbConfig ?? {}),
                        );
                      });
                },
              ),
              ListTile(
                title: Text('Origin Pool Configuration'),
                onTap: () {
                  showDialog(
                      context: context,
                      builder: (context) {
                        return AlertDialog(
                          title: Text('Origin Pool Configuration'),
                          content: RevisionDialog(
                              jsonData: modelList[index].lbConfig ?? {}),
                        );
                      });
                },
                trailing: Icon(Icons.navigate_next),
              ),
              ListTile(
                trailing: Icon(Icons.navigate_next),
                title: Text('Application Firewall Configuration'),
                onTap: () {
                  showDialog(
                      context: context,
                      builder: (context) {
                        return AlertDialog(
                          title: Text('WAF Configuration'),
                          content: RevisionDialog(
                              jsonData: modelList[index].lbConfig ?? {}),
                        );
                      });
                },
              ),
              SizedBox(
                height: 48,
                child: Row(
                  children: [
                    IconButton.filledTonal(
                      onPressed: () {},
                      icon: Icon(Icons.account_tree),
                      tooltip: 'Compare Revisions With...',
                    ),
                    SizedBox(
                      width: 8,
                    ),
                    IconButton.filledTonal(
                      onPressed: model.environment == "staging" ? () {} : null,
                      icon: Icon(Icons.upload_file_rounded),
                      tooltip: model.environment == "staging"
                          ? 'Promote Revision to Production'
                          : "This is a Production revision",
                    ),
                    SizedBox(
                      width: 8,
                    ),
                    IconButton.filledTonal(
                        tooltip: 'Rollback/Roll-forward',
                        onPressed: () {},
                        icon: Icon(Icons.history_edu))
                  ],
                ),
              )
            ],
          );
        });
  }

  Future<ListRevisionModel> _buildChildren(VersionModel model) async {
    FlutterSecureStorage storage = FlutterSecureStorage();
    String bearer = await storage.read(key: 'auth') ?? "";
    PolicyType type = model.environment == "staging"
        ? PolicyType.staging
        : PolicyType.production;
    // return await SqlQueryHelper()
    //     .getAllRevisions(bearer, model.appName ?? "", type);

    return await SqlQueryHelper()
        .getAllRevisions(bearer, model.appName ?? "", type);
  }
}
